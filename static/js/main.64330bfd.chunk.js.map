{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountry","setSearchCountry","useEffect","axios","all","get","then","res","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","includes","map","i","Card","key","bg","text","className","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","recovered","deaths","todayCases","todayDeaths","active","critical","Footer","style","textAlign","CardDeck","Form","margin","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.64330bfd.chunk.js","sourcesContent":["import React, {useEffect,useState} from 'react';\nimport './App.css';\nimport {CardDeck,Card,Form} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport Columns from 'react-columns';\n\nfunction App() {\n  const [latest,setLatest]=useState([]);\n  const [results,setResults]=useState([]);\n  const [searchCountry,setSearchCountry]=useState(\"\");\n  useEffect(() => {\n    axios\n        .all([\n          axios.get(\"https://corona.lmao.ninja/v2/all\"),\n          axios.get(\"https://corona.lmao.ninja/v2/countries\")\n        ])\n        \n        .then(res=>{\n          setLatest(res[0].data);\n          setResults(res[1].data);\n        })\n        .catch(err=>{\n          console.log(err);\n        });\n  }, []);\n  const date= new Date(parseInt(latest.updated));\n  const lastUpdated=date.toString();\n  const filterCountry = results.filter(item=>{\n    return searchCountry!==\"\"?item.country.toLowerCase().includes(searchCountry.toLowerCase()):item;\n  })\n  const countries=filterCountry.map((data,i)=>{\n    return (\n      <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center card\">\n        <Card.Img variant=\"top\" src={data.countryInfo.flag}/>\n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Today's cases {data.todayCases}</Card.Text>\n          <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n        <Card.Footer>\n          <small>Last updated {lastUpdated}</small>\n        </Card.Footer>\n      </Card>\n    )\n  });\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  return (\n    <div className=\"main\">\n      <br/>\n      <h2 style={{textAlign:\"center\"}}>Covid-19 Live status</h2>\n      <br/>\n      <CardDeck className=\"CardDeck\">\n        <Card bg=\"secondary\" text=\"white\" className=\"text-center card\">\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            <Card.Text>\n            {latest.cases}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg=\"success\" text=\"white\" className=\"text-center card\">\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>\n            {latest.recovered}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg=\"danger\" text=\"white\" className=\"text-center card\">\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>\n            {latest.deaths}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n      <br/>\n      <Form style={{margin:\"10px\"}}>\n        <Form.Group controlId=\"formGroupSearch\">\n          <Form.Control type=\"text\" placeholder=\"Search a country\" onChange={e=>setSearchCountry(e.target.value)}/>\n        </Form.Group>\n      </Form>\n      <br/>\n      <Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}