{"version":3,"sources":["Nav.js","Home.js","India.js","States.js","App.js","serviceWorker.js","index.js"],"names":["Nav","id","className","to","Home","useState","latest","setLatest","results","setResults","searchCountry","setSearchCountry","useEffect","axios","all","get","then","res","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","includes","map","i","Card","key","bg","text","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","recovered","deaths","todayCases","todayDeaths","active","critical","Footer","CardDeck","Form","style","margin","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","India","total","setTotal","searchState","setSearchState","statewise","shift","history","useHistory","statesOfIndia","state","Header","fontWeight","fontSize","confirmed","deltaconfirmed","deltadeaths","deltarecovered","Button","lastupdatedtime","paddingLeft","paddingRight","onClick","push","float","aria-hidden","States","match","fetchDistrictData","searchDistrict","setSearchDistrict","districts","setDistricts","a","fetch","fetD","json","distData","params","statee","districtData","entries","Object","statesDistrict","d","delta","deceased","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ce311782.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav>\r\n      <h2 id=\"header\" className=\"covid-header\">\r\n        Covid-19 Live status\r\n      </h2>\r\n      <ul className=\"nav-links\">\r\n        <Link to=\"/\">\r\n          <li>World (Country-wise)</li>\r\n        </Link>\r\n        <Link to=\"/india\">\r\n          <li>India (State-wise)</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { CardDeck, Card, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport Columns from \"react-columns\";\r\n\r\nfunction Home() {\r\n  const [latest, setLatest] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n  const [searchCountry, setSearchCountry] = useState(\"\");\r\n  useEffect(() => {\r\n    axios\r\n      .all([\r\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\r\n        axios.get(\"https://corona.lmao.ninja/v2/countries\"),\r\n      ])\r\n      .then((res) => {\r\n        setLatest(res[0].data);\r\n        setResults(res[1].data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const date = new Date(parseInt(latest.updated));\r\n  const lastUpdated = date.toString();\r\n  var queries = [\r\n    {\r\n      columns: 2,\r\n      query: \"min-width: 500px\",\r\n    },\r\n    {\r\n      columns: 3,\r\n      query: \"min-width: 1000px\",\r\n    },\r\n  ];\r\n  const filterCountry = results.filter((item) => {\r\n    return searchCountry !== \"\"\r\n      ? item.country.toLowerCase().includes(searchCountry.toLowerCase())\r\n      : item;\r\n  });\r\n  const countries = filterCountry.map((data, i) => {\r\n    return (\r\n      <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center card\">\r\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} />\r\n        <Card.Body>\r\n          <Card.Title>{data.country}</Card.Title>\r\n          <Card.Text>Cases - {data.cases}</Card.Text>\r\n          <Card.Text>Recovered - {data.recovered}</Card.Text>\r\n          <Card.Text>Deaths - {data.deaths}</Card.Text>\r\n          <Card.Text>Today's cases - {data.todayCases}</Card.Text>\r\n          <Card.Text>Today's deaths - {data.todayDeaths}</Card.Text>\r\n          <Card.Text>Active - {data.active}</Card.Text>\r\n          <Card.Text>Critical - {data.critical}</Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <small>Last updated</small>\r\n          <br />\r\n          <small>{lastUpdated}</small>\r\n        </Card.Footer>\r\n      </Card>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <CardDeck className=\"CardDeck\">\r\n        <Card bg=\"secondary\" text=\"white\" className=\"text-center card\">\r\n          <Card.Body>\r\n            <Card.Title>Cases</Card.Title>\r\n            <Card.Text>{latest.cases}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small>Last updated {lastUpdated}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card bg=\"success\" text=\"white\" className=\"text-center card\">\r\n          <Card.Body>\r\n            <Card.Title>Recovered</Card.Title>\r\n            <Card.Text>{latest.recovered}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small>Last updated {lastUpdated}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card bg=\"danger\" text=\"white\" className=\"text-center card\">\r\n          <Card.Body>\r\n            <Card.Title>Deaths</Card.Title>\r\n            <Card.Text>{latest.deaths}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small>Last updated {lastUpdated}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n      </CardDeck>\r\n      <br />\r\n      <Form style={{ margin: \"10px\" }}>\r\n        <Form.Group controlId=\"formGroupSearch\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Search a country\"\r\n            onChange={(e) => setSearchCountry(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      <br />\r\n      <Columns queries={queries}>{countries}</Columns>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { CardDeck, Card, Form, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport Columns from \"react-columns\";\r\n// import ReactHtmlParser from \"react-html-parser\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction India() {\r\n  const [total, setTotal] = useState({});\r\n  const [results, setResults] = useState([]);\r\n  const [searchState, setSearchState] = useState(\"\");\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://api.covid19india.org/data.json\")\r\n      .then((res) => {\r\n        setTotal(res.data.statewise[0]);\r\n        res.data.statewise.shift();\r\n        setResults(res.data.statewise);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n  var queries = [\r\n    {\r\n      columns: 2,\r\n      query: \"min-width: 500px\",\r\n    },\r\n    {\r\n      columns: 3,\r\n      query: \"min-width: 1000px\",\r\n    },\r\n  ];\r\n  const history = useHistory();\r\n  const filterState = results.filter((item) => {\r\n    return searchState !== \"\"\r\n      ? item.state.toLowerCase().includes(searchState.toLowerCase())\r\n      : item;\r\n  });\r\n  const statesOfIndia = filterState.map((data, i) => {\r\n    return (\r\n      <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center card\">\r\n        <Card.Header style={{ fontWeight: \"bold\", fontSize: \"larger\" }}>\r\n          {data.state}\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Card.Text>Active Cases - {data.active}</Card.Text>\r\n          <Card.Text>Confirmed Cases - {data.confirmed}</Card.Text>\r\n          <Card.Text>Delta confirmed - {data.deltaconfirmed}</Card.Text>\r\n          <Card.Text>Deaths - {data.deaths}</Card.Text>\r\n          <Card.Text>Delta deaths - {data.deltadeaths}</Card.Text>\r\n          <Card.Text>Recovered - {data.recovered}</Card.Text>\r\n          <Card.Text>Delta recovered - {data.deltarecovered}</Card.Text>\r\n          {/* {data.statenotes !== \"\" ? <Card.Title>State Notes</Card.Title> : null}\r\n          {data.statenotes !== \"\" ? (\r\n            <Card.Text>{ReactHtmlParser(data.statenotes)}</Card.Text>\r\n          ) : null} */}\r\n          <Button variant=\"primary\" className=\"buttons\">\r\n            <Link to={`/india/${data.state}`}>View districts status</Link>\r\n          </Button>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <small>Last updated {data.lastupdatedtime}</small>\r\n        </Card.Footer>\r\n      </Card>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h3 style={{ paddingLeft: \"30px\" }}>\r\n        <i\r\n          className=\"fa fa-chevron-circle-left\"\r\n          style={{ paddingRight: \"10px\" }}\r\n          onClick={() => history.push(\"/\")}\r\n        />\r\n        States of India\r\n        <i\r\n          className=\"fa fa-remove\"\r\n          style={{ float: \"right\", paddingRight: \"30px\" }}\r\n          aria-hidden=\"true\"\r\n          onClick={() => history.push(\"/\")}\r\n        />\r\n      </h3>\r\n      <br />\r\n      <CardDeck className=\"CardDeck\">\r\n        <Card bg=\"secondary\" text=\"white\" className=\"text-center card\">\r\n          <Card.Body>\r\n            <Card.Title>Confirmed cases</Card.Title>\r\n            <Card.Text>{total.confirmed}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small>Last updated {total.lastupdatedtime}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card bg=\"success\" text=\"white\" className=\"text-center card\">\r\n          <Card.Body>\r\n            <Card.Title>Recovered</Card.Title>\r\n            <Card.Text>{total.recovered}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small>Last updated {total.lastupdatedtime}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card bg=\"danger\" text=\"white\" className=\"text-center card\">\r\n          <Card.Body>\r\n            <Card.Title>Deaths</Card.Title>\r\n            <Card.Text>{total.deaths}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small>Last updated {total.lastupdatedtime}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n      </CardDeck>\r\n      <br />\r\n      <Form style={{ margin: \"10px\" }}>\r\n        <Form.Group controlId=\"formGroupState\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Search state\"\r\n            onChange={(e) => setSearchState(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      <br />\r\n      <Columns queries={queries}>{statesOfIndia}</Columns>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default India;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Card, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Columns from \"react-columns\";\r\nimport { useHistory } from \"react-router-dom\";\r\nfunction States({ match }) {\r\n  useEffect(() => {\r\n    fetchDistrictData();\r\n  }, []);\r\n  const [searchDistrict, setSearchDistrict] = useState(\"\");\r\n  const [districts, setDistricts] = useState({});\r\n  const fetchDistrictData = async () => {\r\n    const fetD = await fetch(\r\n      `https://api.covid19india.org/state_district_wise.json`\r\n    );\r\n    const distData = await fetD.json();\r\n    setDistricts(distData[match.params.statee].districtData);\r\n  };\r\n  const entries = Object.entries(districts);\r\n  var queries = [\r\n    {\r\n      columns: 2,\r\n      query: \"min-width: 500px\",\r\n    },\r\n    {\r\n      columns: 3,\r\n      query: \"min-width: 1000px\",\r\n    },\r\n  ];\r\n  const history = useHistory();\r\n  const filterDistrict = entries.filter((item) => {\r\n    return searchDistrict !== \"\"\r\n      ? item[0].toLowerCase().includes(searchDistrict.toLowerCase())\r\n      : item;\r\n  });\r\n  const statesDistrict = filterDistrict.map((d, i) => {\r\n    const data = d[1];\r\n    return (\r\n      <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center card\">\r\n        <Card.Header style={{ fontWeight: \"bold\", fontSize: \"larger\" }}>\r\n          {d[0]}\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Card.Text>Active Cases - {data.active}</Card.Text>\r\n          <Card.Text>Confirmed Cases - {data.confirmed}</Card.Text>\r\n          <Card.Text>Delta confirmed - {data.delta.confirmed}</Card.Text>\r\n          <Card.Text>Deaths - {data.deceased}</Card.Text>\r\n          <Card.Text>Recovered - {data.recovered}</Card.Text>\r\n          <Card.Text>Delta recovered - {data.delta.recovered}</Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h3 style={{ paddingLeft: \"30px\" }}>\r\n        <i\r\n          className=\"fa fa-chevron-circle-left\"\r\n          style={{ paddingRight: \"10px\" }}\r\n          onClick={() => history.push(\"/india\")}\r\n        />\r\n        Districts of {match.params.statee}\r\n        <i\r\n          className=\"fa fa-remove\"\r\n          style={{ float: \"right\", paddingRight: \"30px\" }}\r\n          aria-hidden=\"true\"\r\n          onClick={() => history.push(\"/india\")}\r\n        />\r\n      </h3>\r\n      <br />\r\n      <Form style={{ margin: \"10px\" }}>\r\n        <Form.Group controlId=\"formGroupDistict\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Search district\"\r\n            onChange={(e) => setSearchDistrict(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      <br />\r\n      <Columns queries={queries}>{statesDistrict}</Columns>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default States;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Nav from \"./Nav\";\r\nimport Home from \"./Home\";\r\nimport India from \"./India\";\r\nimport States from \"./States\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"main\">\r\n      <br />\r\n      <Router>\r\n        <Nav />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/india\" exact component={India} />\r\n          <Route path=\"/india/:statee\" component={States} />\r\n        </Switch>\r\n      </Router>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}